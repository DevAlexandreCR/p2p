<?php

namespace Tests\Feature\Http\Controllers\UserController;

use App\Constants\Permissions;
use App\Models\User;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\Feature\Http\Controllers\BaseControllerTest;

class UpdateTest extends BaseControllerTest
{
    use WithFaker;

    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'enabled' => true
        ]);
    }

    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithPermissionsCanExecuteThisAction()
    {
        $this->admin->givePermissionTo(Permissions::EDIT_USERS);

        $response = $this->actingAs($this->admin)->put(route('users.update', $this->user->id), [
            'name' => $name = $this->faker->name,
            'email' => $email = $this->faker->email,
            'enabled' => false
        ]);

        $response
            ->assertStatus(302)
            ->assertSessionHas('success');

        $this->assertDatabaseHas('users', [
            'id' => $this->user->id,
            'name' => $name,
            'email' => $email,
            'enabled' => false
        ]);
    }

    /**
     * Test Response has error of validation and update is failed
     *
     * @return void
     */
    public function testResponseHasErrorsWhenDataIsNotValid()
    {
        $this->admin->givePermissionTo(Permissions::EDIT_USERS);

        $response = $this->actingAs($this->admin)->from(route('users.show', $this->user->id))
            ->put(route('users.update', $this->user->id), [
            'name' => $name = false,
            'email' => $email = $this->faker->name,
            'enabled' => 111
        ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('users.show', $this->user->id))
            ->assertSessionHasErrors([
                'name',
                'email',
                'enabled',
            ]);

        $this->assertDatabaseMissing('users', [
            'name' => $name,
            'email' => $email,
            'enabled' => 111
        ]);
    }

    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithoutPermissionsCannotExecuteThisAction()
    {
        $response = $this->actingAs($this->admin)->put(route('users.update', $this->user->id));

        $response
            ->assertStatus(403)
            ->assertForbidden();
    }

    /**
     * Test user unauthenticated is redirected to Login.
     *
     * @return void
     */
    public function testAnUserUnauthenticatedIsRedirectedToLogin()
    {
        $response = $this->put(route('users.update', $this->user->id));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('login'));
    }
}
