<?php

namespace Tests\Feature\Http\Controllers\PermissionController;

use App\Constants\Permissions;
use App\Constants\Roles;
use App\Models\User;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;
use Tests\Feature\Http\Controllers\BaseControllerTest;

class UpdateTest extends BaseControllerTest
{

    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::factory()->create([
            'enabled' => true
        ]);
    }

    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithPermissionsCanExecuteThisAction()
    {
        $this->admin->givePermissionTo(Permissions::EDIT_PERMISSIONS);

        $viewUser = Permission::findByName(Permissions::VIEW_USERS);
        $editUser = Permission::findByName(Permissions::EDIT_USERS);
        $roleAdmin = Role::findByName(Roles::ADMIN);

        $response = $this->actingAs($this->admin)->put(route('permissions.update', $this->user->id), [
            'permissions' => [$viewUser->id, $editUser->id],
            'roles' => [$roleAdmin->id]
        ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('users.show', $this->user->id))
            ->assertSessionHas('success');

        $this->assertDatabaseHas('model_has_roles', [
            'role_id' => $roleAdmin->id,
            'model_type' => User::class,
            'model_id' => $this->user->id
        ]);
        $this->assertDatabaseHas('model_has_permissions', [
            'permission_id' => $viewUser->id,
            'model_type' => User::class,
            'model_id' => $this->user->id
        ]);
        $this->assertDatabaseHas('model_has_permissions', [
            'permission_id' => $editUser->id,
            'model_type' => User::class,
            'model_id' => $this->user->id
        ]);
    }

    /**
     * Test Test Response has error of validation and update is failed
     * @return void
     */
    public function testResponseHasErrorsWhenDataIsNotValid()
    {
        $this->admin->givePermissionTo(Permissions::EDIT_PERMISSIONS);

        $response = $this->actingAs($this->admin)->from(route('users.show', $this->user->id))
            ->put(route('permissions.update', $this->user->id), [
                'permissions' => ['fake id', true],
                'roles' => ['fake role id', null]
            ]);

        $response
            ->assertStatus(302)
            ->assertRedirect(route('users.show', $this->user->id))
            ->assertSessionHasErrors([
                'permissions.*',
                'roles.*'
            ]);

        $this->assertDatabaseMissing('model_has_roles', [
            'role_id' => 'fake role id',
            'model_type' => User::class,
            'model_id' => $this->user->id
        ]);

        $this->assertDatabaseMissing('model_has_permissions', [
            'permission_id' => 'fake id',
            'model_type' => User::class,
            'model_id' => $this->user->id
        ]);
    }

    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithoutPermissionsCannotExecuteThisAction()
    {
        $response = $this->actingAs($this->admin)->put(route('permissions.update', $this->user->id));

        $response
            ->assertStatus(403)
            ->assertForbidden();
    }

    /**
     * Test user unauthenticated is redirected to Login.
     *
     * @return void
     */
    public function testAnUserUnauthenticatedIsRedirectedToLogin()
    {
        $response = $this->put(route('permissions.update', $this->user->id));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('login'));
    }
}
