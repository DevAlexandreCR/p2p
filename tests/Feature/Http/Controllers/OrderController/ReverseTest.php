<?php

namespace Tests\Feature\Http\Controllers\OrderController;

use App\Constants\PaymentGateway;
use App\Gateways\PlaceToPay\Statuses;
use App\Models\Order;
use App\Models\Payment;
use App\Models\Product;
use App\Models\User;
use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Http;
use Tests\Feature\Http\Controllers\BaseControllerTest;

class ReverseTest extends BaseControllerTest
{
    public Order $order;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create([
            'user_id' => $this->admin->id
        ]);
        Product::factory(3)->create()->each(function ($product) {
            $product->order()->attach($this->order->id, [
                'quantity' => 1
            ]);
        });
    }

    /**
     * @inheritDoc
     */
    public function testAnUserWithPermissionsCanExecuteThisAction()
    {
        $url = config('gateways.placeToPay.baseUrl');
        Http::fake([
            $url . 'api/reverse/' => Http::response(['status' => [
                'status' => Statuses::STATUS_APPROVED,
                'message' => 'Se ha reversado el pago correctamente'
            ]])
        ]);

        $payment = Payment::create([
            'order_id' => $this->order->id,
            'gateway'  => PaymentGateway::PLACE_TO_PAY,
            'amount'   => $this->order->amount
        ]);
        $response = $this->actingAs($this->admin)
            ->post(route('users.orders.reverse', [$this->admin->id, $this->order->id]));

        Http::assertSent(function (Request $request) use ($url) {
            return $request->url() == $url . 'api/reverse/';
        });

        $response
            ->assertStatus(302)
            ->assertRedirect(route('users.orders.show', [$this->admin->id, $this->order->id]));

        $this->assertDatabaseHas('payments', [
            'id' => $payment->id,
            'status' => Statuses::STATUS_REFUNDED
        ]);
    }

    /**
     * @inheritDoc
     */
    public function testAnUserWithoutPermissionsCannotExecuteThisAction()
    {
        $anotherUser = User::factory()->create();

        $response = $this->actingAs($this->admin)
            ->post(route('users.orders.reverse', [$anotherUser->id, $this->order->id]));

        $response
            ->assertStatus(403)
            ->assertForbidden();
    }

    /**
     * @inheritDoc
     */
    public function testAnUserUnauthenticatedIsRedirectedToLogin()
    {
        $response = $this->post(route('users.orders.reverse', [$this->admin->id, $this->order->id]));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('login'));
    }
}
