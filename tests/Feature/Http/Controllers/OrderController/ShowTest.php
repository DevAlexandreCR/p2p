<?php

namespace Tests\Feature\Http\Controllers\OrderController;

use App\Constants\PaymentGateway;
use App\Models\Order;
use App\Models\Payment;
use App\Models\User;
use Tests\Feature\Http\Controllers\BaseControllerTest;

class ShowTest extends BaseControllerTest
{

    private $order;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->order = Order::factory()->create([
            'user_id' => $this->admin->id
        ]);
    }
    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithPermissionsCanExecuteThisAction()
    {
        Payment::create([
            'order_id' => $this->order->id,
            'gateway'  => PaymentGateway::PLACE_TO_PAY,
            'amount'   => $this->order->amount
        ]);
        $response = $this->actingAs($this->admin)
            ->get(route('users.orders.show', [$this->admin->id, $this->order->id]));

        $response
            ->assertStatus(200)
            ->assertViewIs('home.users.orders.show')
            ->assertViewHas('order');
    }

    /**
     * Test an user without permissions can't execute this action.
     *
     * @return void
     */
    public function testAnUserWithoutPermissionsCannotExecuteThisAction()
    {
        $anotherUser = User::factory()->create();

        $response = $this->actingAs($this->admin)
            ->get(route('users.orders.show', [$anotherUser->id, $this->order->id]));

        $response
            ->assertStatus(403)
            ->assertForbidden();
    }

    /**
     * Test user unauthenticated is redirected to Login.
     *
     * @return void
     */
    public function testAnUserUnauthenticatedIsRedirectedToLogin()
    {
        $response = $this->get(route('users.orders.show', [$this->admin->id, $this->order->id]));

        $response
            ->assertStatus(302)
            ->assertRedirect(route('login'));
    }
}
